/*  Basic Jig

Types:

id - Name and path of the object.
atom - Prolog atom, assumed to be an object name.
string - String data, such as titles and description.
term - Prolog terms.
number - Numbers in any Prolog format.
list_of_atoms - List of Prolog atoms, assumed to be object names.
list_of_strings - List of strings (i.e. values for facts).
list_of_numbers - List of numbers.
list_of_terms - List of Prolog terms, assumed to be rule conditions 
   or quoted fact values.

Display Types:

menu - a fixed listed of choices.
list_object - a user modifiable list of single line entries
text_line - a single line entry
text_box - multiple line entry with scrollbars
table - editable table, passed as list of lists and edited with 
   text lines for cells.
text_table - table with predefined columns and edited with text 
   boxes for cells--the default value is the column headers.

Special Facets:

helpURL on the id is the help for that frame (in the docs directory).
vars indicates if the string or list_of_strings fields is processed
   for variable names enclosed in percent's.
default is used to generate new frames and must be defined.
help is the tool tip text for that field.
related_slots is a list of fields to enable and disable for each
   value of a menu.

Definitions:

All frames have the structure type(id, path, slotlist). Hence the
slots named id and path are special and identify the name and folder
location of the object. Changing id and path is not supported yet.

The global first_object specifies which frame is created in a new
knowledgebase with the name first_object_name.

The global xref_roots defines the list of objects that will never
be referenced by other objects.

The global help_url is the help for this knowledgebase (in the docs 
directory).
*/

%------------------------------------------------
% CVS history
%
% $Log: decision_tree.jig,v $
% Revision 1.2  2001/04/20 23:13:18  mary
% Bug fixes for 4.1.14
%
% Revision 1.1.1.1  2001/03/08 05:03:49  mary
% New decision tree jig.
%
% Revision 1.38  2001/03/04 23:17:42  mary
% Fixed SQL types, removed number, boolean, added integer, float.
% Added throw in case these get out of sync again in future.
%
% Revision 1.37  2001/03/04 22:05:38  mary
% Added format_ouput to handle 3 new output fields in knowledgebase objects.
%
% Revision 1.36  2001/03/04 21:07:19  mary
% Added output_top, output_bottom, output_continue.
%
% Revision 1.35  2001/03/04 01:51:05  mary
% Added date to answer_type.
%
% Revision 1.34  2001/02/28 05:26:14  mary
% Added primary_questions and prompt vars to joblook. Fixed comments in basic.
%
% Revision 1.33  2001/02/23 00:50:07  mary
% Allow variables in prompts (again). New method for ask-also processing.
%
% Revision 1.32  2001/02/14 20:51:28  mary
% Added listof to jigs implemented combo boxes to select object names.
%
% Revision 1.31  2001/02/13 01:38:23  mary
% Minor enhancements.
%
% Revision 1.30  2001/02/12 22:08:46  mary
% Unified all the jigs. Fixed question order for ask also. Moved log file
% to session_directory.
%
% Revision 1.29  2001/02/09 23:53:06  mary
% Changed prompts to not have vars. Added ask_also support to Basic.
% Fixed support reasoner to not return a blank solution when asking questions.
%
% Revision 1.28  2001/02/06 19:17:21  mary
% Added help URL to basic jig.
%
% Revision 1.27  2001/02/06 00:21:46  mary
% For menus, allow display text separate from text value used in rules.
%
% Revision 1.26  2001/01/27 23:37:28  mary
% Change help file for rule_sets to object_rule_set.html
%
% Revision 1.25  2001/01/26 18:22:27  mary
% Added xref_roots to schema and implemented them to not list root objects
% as unused. Also, eliminate system(_) as undefined.
%
% Revision 1.24  2001/01/26 17:03:43  mary
% Re-ordered and added some xref entries.
%
% Revision 1.23  2001/01/24 19:36:42  mary
% Fixed default value for basic jig question top + bottom.
% Small edits to sales jig.
%
% Revision 1.22  2001/01/18 21:53:10  mary
% Merged document_format with knowledgebase.
%
% Revision 1.21  2001/01/02 16:46:54  mary
% Added xref entries, and added table default value.
%
% Revision 1.20  2000/12/14 22:02:56  dennis
% Changed rule to rule_set in hopefully all the places
%
% Revision 1.19  2000/12/13 17:12:33  mary
% Fixed related slots for questions.
%
% Revision 1.18  2000/12/11 02:04:15  dennis
% basic jig to v2, added kw_consult to convert so that
% kbs are automatically updated to new jigs. colors_1.kb
% is the test file in v1 format.
%
% Revision 1.17  2000/12/10 04:06:49  mary
% Reversed conditions and values in rules and tables.
%
% Revision 1.16  2000/12/04 02:46:13  mary
% Fixed default for document_format.
%
% Revision 1.12  2000/11/30 04:13:31  mary
% Change answer_separator to value_separator.
%
% Revision 1.11  2000/11/30 04:07:20  mary
% Fixed text objects to be text boxes not tables.
%
% Revision 1.10  2000/11/29 23:07:34  dennis
% added version number
%
% Revision 1.9  2000/11/29 22:55:04  dennis
% changed old text to translation, but commented out
% of .jig for now, and made simpler new text object
%
% Revision 1.8  2000/11/29 22:25:06  dennis
% Changed question_document object to document_format object,
% modified slots to reflect questionness of items.
%
% Revision 1.7  2000/11/29 19:09:51  dennis
% Added CVS logging to source files
%
%------------------------------------------------


schema_global(version, 1).
schema_global(first_object, knowledgebase).
schema_global(first_object_name, main).
schema_global(xref_roots, [knowledgebase]).
schema_global(help_url, $jigs_basic_manual.html$).

schema_definition(id, id).
schema_definition(path, path).

schema(knowledgebase, [
   id : [
      type = id,
      display = id,
      icon = $pencil.gif$,
      help_url = $object_knowledgebase.html$,
      help = $The name of this object$, 
      object_help = $The global definitions for this knowledgebase$],
   path : [
      type = id,
      display = id,
      help = $The folder this object is in$],
   description : [
      type = string,
      display = text_box,
      default = $$],
   goals : [
      type = list_of_atoms,
      display = name_list,
      listof = [rule_set, text],
      xref = list,
      default = []],
   odbc : [
      type = string,
      display = text_line,
      default = $$],
   question_separator : [
      type = string,
      display = text_line,
      default = $<P>$],
   menu_separator : [
      type = string,
      display = text_line,
      default = $<BR>$],
   value_separator : [
      type = string,
      display = text_line,
      default = $<P>$],
   question_top : [
      type = string,
      display = text_box, 
      vars = true,
      xref = text,
      default = text($<HTML><HEAD></HEAD><BODY><FORM METHOD="POST" ACTION="/cgi-bin/kwcgibasic.exe$ + system(cgi_parameters) + $">$)],
   question_bottom : [
      type = string,
      display = text_box, 
      vars = true,
      xref = text,
      default = text($<P><INPUT NAME="Submit" TYPE="Submit" VALUE="Submit"></INPUT> <INPUT TYPE="Reset" VALUE="Reset"></INPUT></FORM></BODY></HTML>$)],
   output_top : [
      type = string,
      display = text_box, 
      vars = true,
      xref = text,
      default = text($<HTML><HEAD></HEAD><BODY>$)],
   output_continue : [
      type = string,
      display = text_box, 
      vars = true,
      xref = text,
      default = text($<FORM METHOD="POST" ACTION="/cgi-bin/kwcgibasic.exe$ + system(cgi_parameters) + $"><INPUT NAME="Submit" TYPE="Submit" VALUE="Continue"></INPUT></FORM>$)],
   output_bottom : [
      type = string,
      display = text_box, 
      vars = true,
      xref = text,
      default = text($</BODY></HTML>$)]
   ]).

schema(fact, [
   id : [
      type = id,
      display = id,
      icon = $diamond.gif$,
      help = $The name of this object$, 
      help_url = $object_fact.html$,
      object_help = $The definition of a fact$],
   path : [
      type = id,
      display = id,
      help = $The folder this object is in$],
   description : [
      type = string,
      display = text_box,
      default = $$,
      help = $A description of this object for people$],
   value : [
      type = term,
      display = text_line,
      default = '',
      help = $The value of this object. Use double-quotes for text.$]
   ]).

schema(question, [
   id : [
      type = id,
      display = id,
      icon = $question.gif$,
      help = $The name of this object$,
      help_url = $object_question.html$,
      object_help = $The definition of a fact$],
   path : [
      type = id,
      display = id,
      help = $The folder this object is in$],
   prompt : [
      type = string,
      display = text_box,
      vars = true,
      xref = text,
      default = $$,
      help = $The text prompt for the user$],
   question_type : [
      type = atom,
      display = menu, 
      choices = [menu_single_choice, menu_multiple_choices, fill_in_the_blank,
         menu_single_choice_display_separate, menu_multiple_choices_display_separate],
      default = menu_single_choice,
      help = $The way the question is presented to the user$,
      related_slots = [
         menu_single_choice : [choices, question_style] : ['rule-display_choices', length, answer_type],
         menu_multiple_choices : [choices, question_style] : ['rule-display_choices', length, answer_type],
         menu_single_choice_display_separate : ['rule-display_choices', question_style] : [choices, length, answer_type],
         menu_multiple_choices_display_separate : ['rule-display_choices', question_style] : [choices, length, answer_type],
         fill_in_the_blank : [length, answer_type] : [choices, 'rule-display_choices', question_style] ]
      ],
   question_style : [
      type = atom,
      display = menu,
      choices = [listbox, checkbox_radio],
      default = list,
      help = $For HTML formatting, the style to use$],
   choices : [
      type = list_of_strings,
      display = list_object,
      default = [],
      help = $The list of possible choices for a menu$],
   'rule-display_choices' : [
      type = list_of_strings, 
      display = text_table, 
      default = [[rule_text, display_text]] ],
   answer_type : [
      type = atom,
      display = menu, 
      choices = [text, number, date, boolean],
      default = text,
      help = $The type of response required$],
   length : [
      type = number,
      display = text_line,
      default = 20,
      help = $The length of the field for the user to type the answer into$],
   default : [
      type = string,
      display = text_line,
      default = $$,
      help = $The default answer for this question$],
   ask_also : [
      type = list_of_atoms,
      display = name_list,
      listof = [question],
      xref = list,
      default = [],
      help = $The list of questions to be asked whenever this question is asked$]
   ]).

schema(tree, [
   object : [
      type = atom,
      display = text_line,
%      listof = [question, sql, fact, rule_set, table],
%      xref = list,
      default = $$,
      help = $The list of question, sql, fact or other objects to get a value for before branching$],
   branch_table : [
      type = list_of_terms, 
      display = table, 
      vars = true, 
      xref = table,
      default = [[$conditions$, $branch or value$]]]
   ]).

schema(branch, [
   object : [
      type = atom,
      display = text_line,
%      listof = [question, sql, fact, rule_set, table],
%      xref = list,
      default = $$,
      help = $The list of question, sql, fact or other objects to get a value for before branching$],
   branch_table : [
      type = list_of_terms, 
      display = table, 
      vars = true, 
      xref = table,
      default = [[$conditions$, $branch or value$]]]
   ]).

schema(sql, [
   id : [
      type = id,
      display = id,
      icon = $cdrom.gif$,
      help = $The name of this object$,
      help_url = $object_sql.html$,
      object_help = $A fact value that is retrieved from a SQL database$],
   path : [
      type = id,
      display = id,
      help = $The folder this object is in$],
   description : [
      type = string,
      display = text_box,
      default = $$],
   query : [
      type = string,
      display = text_box,
      vars = true,
      xref = text,
      default = $$],
   type : [
      type = atom,
      display = menu, 
      choices = [text, integer, float, date],
      default = string,
      help = $The type of data returned by the SQL query$],
   length : [
      type = number,
      display = text_line,
      default = 20,
      help = $The length of the field$]
   ]).

schema(rule_set, [
   id : [
      type = id,
      display = id,
      icon = $ruler.gif$,
      help = $The name of this object$,
      help_url = $object_rule_set.html$,
      object_help = $Rules that define values for goals and facts$],
   path : [
      type = id,
      display = id,
      help = $The folder this object is in$],
   description : [
      type = string,
      display = text_box,
      default = $$],
   type : [
      type = atom,
      display = menu, 
      choices = [single_value, multiple_values],
      default = single_value,
      help = $Whether the rules for this goal have one or possibly more than one value$],
   rules : [
      type = list_of_terms, 
      display = text_table, 
      vars = true, 
      xref = rules,
      default = [[conditions, value]]]
   ]).

schema(table, [
   id : [
      type = id, 
      display = id,
      icon = $graph.gif$,
      help = $The name of this object$,
      help_url = $object_table.html$,
      object_help = $Rules in table format$],
   path : [
      type = id, 
      display = id, 
      help = $The folder this object is in$],
   description : [
      type = string, 
      display = text_box,
      default = $$],
   type : [
      type = atom, 
      display = menu, 
      choices = [single_value, multiple_values],
      default = single_value,
      help = $Whether the rules for this goal have one or possibly more than one value$],
   rules : [
      type = list_of_terms, 
      display = table, 
      vars = true, 
      xref = table,
      % Must not have a default if create_column is true
      create_column = true,
      help = $If the conditions in all the lefthand columns are met, the last column is the result$]
   ]).

/*
% This is currently not used, its a translation object intended
% to support multi-lingual applications.
schema(translation, [
   id : [
      type = id, 
      display = id, 
      icon = $textpage.gif$,
      help = $The name of this object$,
      help_url = $object_text.html$,
      object_help = $Text that is displayed for the user when a goal is proven$],
   path : [
      type = id, 
      display = id, 
      help = $The folder this object is in$],
   description : [
      type = string, 
      display = text_box, 
      default = $$],
   type : [
      type = atom, 
      display = menu, 
      choices = [text, file],
      default = text,
      help = $The source of the text$,
      related_slots = [
         text : [text] : [file],
         file : [file] : [text] ] ],
   file : [
      type = string, 
      display = text_line, 
      default = $$],
   text : [
      type = string, 
      display = text_box, 
      vars = true,
      default = $$ ]
   ]).
*/

schema(text, [
   id : [
      type = id, 
      display = id, 
      icon = $textpage.gif$,
      help = $The name of this object$,
      help_url = $object_text.html$,
      object_help = $Text that is displayed for the user when a goal is proven$],
   path : [
      type = id, 
      display = id, 
      help = $The folder this object is in$],
   description : [
      type = string, 
      display = text_box, 
      default = $$],
   type : [
      type = atom, 
      display = menu, 
      choices = [text, file],
      default = text,
      help = $The source of the text$,
      related_slots = [
         text : [text] : [file],
         file : [file] : [text] ] ],
   file : [
      type = string, 
      display = text_line, 
      default = $$],
   text : [
      type = string, 
      display = text_box, 
      vars = true,
      xref = text, 
      default = $$]
   ]).
